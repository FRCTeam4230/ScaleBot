// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.team4230.ScaleBot;

import edu.wpi.first.wpilibj.Joystick;

import org.team4230.lib.utils.ControllerMap;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    public Joystick driver;
    public Joystick operator;


    public OI() {
        driver = new Joystick(0);
    }

    public Joystick getdriver() {
        return driver;
    }


    public double getDriveSpeed() {
        return -1 * driver.getRawAxis(ControllerMap.analog.LY);
    }

    /**
     * Gets the drivetrain rotation from the stick. Input sensitivity curves
     * should be applied here.
     *
     * @return a value between -1 and 1 porportional to the drivetrain rotation
     *         rate
     */
    public double getDriveRot() {
        return driver.getRawAxis(ControllerMap.analog.RX) * 0.625;
    }
}

