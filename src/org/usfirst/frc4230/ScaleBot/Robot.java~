// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4230.ScaleBot;

import edu.wpi.first.wpilibj.Preferences;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc4230.ScaleBot.commands.*;
import org.usfirst.frc4230.ScaleBot.subsystems.*;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();

    public static OI oi;
    public static Preferences prefs;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static cubeLift cubeLift;
    public static driveTrain driveTrain;
    public static climber climber;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        RobotMap.init();
        prefs = Preferences.getInstance();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        cubeLift = new cubeLift();
        driveTrain = new driveTrain();
        climber = new climber();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        chooser.addDefault("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        SmartDashboard.putData("Auto mode", chooser);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
        autonomousCommand = chooser.getSelected();
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        //RobotMap.cubeLiftSlider.set(ControlMode.PercentOutput, 
        //		oi.controller1.getRawAxis(1) * 0.5);
        //tuneMagic (RobotMap.cubeLiftSlider, 5.0, prefs);
    }
    
    private void tuneMagic(WPI_TalonSRX motor, double maxRotation, Preferences pref) {
    	double yStick = -oi.controller1.getRawAxis(1);
    	double targetPosition = yStick * maxRotation * 4096;
    	double motorOutput = motor.getMotorOutputPercent();
    	if (oi.controller1.getRawButton(1)) {
    		motor.set(ControlMode.MotionMagic, targetPosition);
    	} else {
    		motor.set(ControlMode.PercentOutput, yStick);
    	}
    	
    	motor.config_kF(0, pref.getDouble("F", 0.0), 10);
    	motor.config_kP(0, pref.getDouble("P", 0.0), 10);
    	motor.config_kI(0, pref.getDouble("I", 0.0), 10);
    	motor.config_kD(0, pref.getDouble("D", 0.0), 10);
    	
    	motor.configMotionCruiseVelocity((int) pref.getDouble("V", 0), 10);
    	motor.configMotionAcceleration((int) pref.getDouble("A", 0), 10);
    	SmartDashboard.putNumber("Motor Output", motorOutput);
    	SmartDashboard.putNumber("Speed", motor.getSelectedSensorVelocity(0));
    	SmartDashboard.putNumber("Target Speed", targetPosition);
    	SmartDashboard.putNumber("Loop Error", motor.getClosedLoopError(0));
    }
    
    private void tune (WPI_TalonSRX motor, double rpm, Preferences pref) {
    	double yStick = -oi.controller1.getRawAxis(1);
    	double targetSpeed = yStick * rpm;
    	double motorOutput = motor.getMotorOutputPercent();
    	if (oi.controller1.getRawButton(2)) {
    		targetSpeed = yStick * rpm;
    		motor.set(ControlMode.Velocity, targetSpeed);
    	} else {
    		
    		motor.set(ControlMode.PercentOutput, yStick);
    	}
    	
    	motor.config_kF(0, pref.getDouble("F", 0.0), 10);
    	motor.config_kP(0, pref.getDouble("P", 0.0), 10);
    	motor.config_kI(0, pref.getDouble("I", 0.0), 10);
    	motor.config_kD(0, pref.getDouble("D", 0.0), 10);
    	SmartDashboard.putNumber("Motor Output", motorOutput);
    	SmartDashboard.putNumber("Speed", motor.getSelectedSensorVelocity(0));
    	SmartDashboard.putNumber("Target Speed", targetSpeed);
    	SmartDashboard.putNumber("Loop Error", motor.getClosedLoopError(0));
    }
}
