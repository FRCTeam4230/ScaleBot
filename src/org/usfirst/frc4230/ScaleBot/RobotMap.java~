// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4230.ScaleBot;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static WPI_TalonSRX cubeLiftSlider;
    public static WPI_TalonSRX cubeLiftIntakeL;
    public static WPI_TalonSRX cubeLiftIntakeR;
    public static WPI_TalonSRX driveTrainR1;
    public static WPI_TalonSRX driveTrainR2;
    public static WPI_TalonSRX driveTrainL1;
    public static WPI_TalonSRX driveTrainL2;
    public static WPI_TalonSRX climberR;
    public static WPI_TalonSRX climberL;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        cubeLiftSlider = new WPI_TalonSRX(6);
        
        
        cubeLiftIntakeL = new WPI_TalonSRX(4);
        
        
        cubeLiftIntakeR = new WPI_TalonSRX(5);
        
        
        driveTrainR1 = new WPI_TalonSRX(1);
        
        
        driveTrainR2 = new WPI_TalonSRX(2);
        
        
        driveTrainL1 = new WPI_TalonSRX(8);
        
        
        driveTrainL2 = new WPI_TalonSRX(9);
        
        
        climberR = new WPI_TalonSRX(3);
        
        
        climberL = new WPI_TalonSRX(7);
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
       /* driveTrainR1.configNominalOutputForward(0, Constants.kTimeoutMs);
        driveTrainR1.configNominalOutputReverse(0, Constants.kTimeoutMs);
        driveTrainR1.configPeakOutputForward(1, Constants.kTimeoutMs);
        driveTrainR1.configPeakOutputReverse(-1, Constants.kTimeoutMs);
        driveTrainR1.configSelectedFeedbackSensor(FeedbackDevice.QuadEncoder, 0, 10);
        driveTrainR1.setSensorPhase(true);
        
        driveTrainR1.config_kF(Constants.kPIDLoopIdx, 0.33, Constants.kTimeoutMs);
        driveTrainR1.config_kP(Constants.kPIDLoopIdx, 0.19, Constants.kTimeoutMs);
        driveTrainR1.config_kI(Constants.kPIDLoopIdx, 0.0, Constants.kTimeoutMs); 
        driveTrainR1.config_kD(Constants.kPIDLoopIdx, 1.9, Constants.kTimeoutMs);
        
        
        driveTrainR2.set(ControlMode.Follower, 4);
        driveTrainR2.setInverted(false);
        
        driveTrainL1.configNominalOutputForward(0, Constants.kTimeoutMs);
        driveTrainL1.configNominalOutputReverse(0, Constants.kTimeoutMs);
        driveTrainL1.configPeakOutputForward(1, Constants.kTimeoutMs);
        driveTrainL1.configPeakOutputReverse(-1, Constants.kTimeoutMs);
        driveTrainL1.configSelectedFeedbackSensor(FeedbackDevice.QuadEncoder, 0, 10);
        driveTrainL1.setInverted(true);
        driveTrainL1.setSensorPhase(true);
        driveTrainL1.config_kF(Constants.kPIDLoopIdx, 0.32, Constants.kTimeoutMs);
        driveTrainL1.config_kP(Constants.kPIDLoopIdx, 0.19, Constants.kTimeoutMs);
        driveTrainL1.config_kI(Constants.kPIDLoopIdx, 0.0, Constants.kTimeoutMs); 
        driveTrainL1.config_kD(Constants.kPIDLoopIdx, 1.9, Constants.kTimeoutMs);
        
        driveTrainL2.set(ControlMode.Follower, 1);
        driveTrainL2.setInverted(true);*/
        climberR.setInverted(true);
        
        climberL.set(ControlMode.Follower, 3);
        climberL.setInverted(true);
    }
}
