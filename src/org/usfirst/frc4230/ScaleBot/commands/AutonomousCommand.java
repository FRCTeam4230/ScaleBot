// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc4230.ScaleBot.commands;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc4230.ScaleBot.Robot;
import org.usfirst.frc4230.ScaleBot.RobotMap;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.LimitSwitchNormal;
import com.ctre.phoenix.motorcontrol.LimitSwitchSource;

/**
 *
 */
public class AutonomousCommand extends Command {
	String field;
	Command midSwitchL;
	Command midSwitchR;
	Command leftScaleL;
	Command leftScaleR;
	Command rightScaleL;
	Command rightScaleR;
	Command forward;
	Command leftSwitch;
	Command rightSwitch;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public AutonomousCommand() {
		midSwitchL = new midSwitchL();
		midSwitchR = new midSwitchR();
		leftScaleL = new LeftScaleOnlyL();
		leftScaleR = new LeftScaleOnlyR();
		rightScaleL = new RightScaleOnlyL();
		rightScaleR = new RightScaleOnlyR();
		forward = new Forward();
		leftSwitch = new LeftSwitch();
		rightSwitch = new RightSwitch();

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	@Override
	protected void initialize() {
		RobotMap.gyro.reset();
		RobotMap.cubeLiftSlider.setSelectedSensorPosition(0, 0, 10);
		field = DriverStation.getInstance().getGameSpecificMessage();
		if (Robot.prefs.getBoolean("Switch Auto", false)) {
			if (field.charAt(0) == 'L') {
				midSwitchL.start();
			} else {
				midSwitchR.start();
			}
		} else if (Robot.prefs.getBoolean("Left Scale Only", false)) {
			if (field.charAt(1) == 'L') {
				leftScaleL.start();
			} else if (field.charAt(0) == 'L') {
				leftSwitch.start();
			} else {
				forward.start();
				
			}
		} else if (Robot.prefs.getBoolean("Right Scale Only", false)) {
			if (field.charAt(1) == 'R') {
				rightScaleR.start();
				
				
			} else if(field.charAt(0) == 'R') {
				rightSwitch.start();
			} else {
				forward.start();
			}
		} else {
			forward.start();
		}

	}

	// Called repeatedly when this Command is scheduled to run
	@Override
	protected void execute() {
		SmartDashboard.putNumber("Gyro", RobotMap.gyro.getAngle());

	}

	// Make this return true when this Command no longer needs to run execute()
	@Override
	protected boolean isFinished() {
		return false;
	}

	// Called once after isFinished returns true
	@Override
	protected void end() {
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	@Override
	protected void interrupted() {
	}


}
